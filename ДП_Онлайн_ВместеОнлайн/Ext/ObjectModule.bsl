#Область ОписаниеПеременных

Перем Протокол;
Перем Хост;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// возвращает список дополнительных доступных команд
// (экспортируемых клиентских процедур модуля) и их название для пользователя
// данные команды будут доступны пользователю через кнопки на странице "Онлайн" в карточке дисконтной программы
// при вызове процедуру в нее передается один параметр - текущая дисконтная программа
Функция СписокДополнительныхКоманд() Экспорт
	
	Рез = Новый СписокЗначений;
	Рез.Добавить("МесячныйОтчет", "Месячный отчет служебный");
	Возврат Рез;
	
КонецФункции

Функция ПроверкаДД(ДП, ДД, ИзАРМа, ДополнительныеПараметры = Неопределено) Экспорт
	
	Параметры = ПараметрыСвязи(ДП, ДД);
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Истина);
	Результат.Вставить("Комментарий", "Функция проверки привязки карты к телефону не поддерживается");
	Возврат Результат;
	
КонецФункции

Функция РасчетСкидки(ДП, ДД, ЗначенияПараметров, ТекСкидки, ПараметрыЧека) Экспорт
	
	Параметры = ПараметрыСвязи(ДП, ДД);
	Запрос = Новый Структура;
	Запрос.Вставить("pos_id", Параметры.ИДКассы);
	Запрос.Вставить("card_number", Параметры.НомерКарты);
	Запрос.Вставить("phone_number", Параметры.Телефон);
	ТекЧек = Новый УникальныйИдентификатор;
	Запрос.Вставить("any_data", Строка(ТекЧек));
	Запрос.Вставить("orders", Новый Массив);
	
	тч = Справочники.НаборУсловий.ПолучитьЗначениеПараметра(ЗначенияПараметров, "Товары");
	Для Каждого Стр Из тч Цикл
		Если Стр.Товар.ВидТовара.Тип <> Перечисления.ТипТовара.Услуга
			И НЕ ПустаяСтрока(Стр.Партия.Изготовитель.ШК) Тогда
			// Костыль подменяющий ШК который не знает процессинг на известный, для товаров участвующих в программе лояльности
			ВалидныйШК = ПолучитьВалидныйШК(Стр.Партия.Изготовитель.ШК);
			Запрос.orders.Добавить(Новый Структура("barcode,count,price,any_data",
					ВалидныйШК, Стр.Количество, Стр.ЦенаПродажиСН, Строка(Стр.Партия.УникальныйИдентификатор())));
		КонецЕсли;
	КонецЦикла;
	Если Запрос.orders.Количество() = 0 Тогда
		Возврат Новый Структура("Результат,Комментарий", Ложь, "В чеке нет товаров с заполненными штрих-кодами.");
	КонецЕсли;
	
	Рез = ОтправитьКоманду("/api/1.0/get_discount/", ЗаписатьТекстJSON(Запрос), Параметры);
	
	Результат = Новый Структура;
	Если Рез.Результат Тогда
		Если Рез.ЗначениеОтвета.status = "success" Тогда
			Результат.Вставить("Результат", Истина);
			Результат.Вставить("Комментарий", Рез.ЗначениеОтвета.description);
			Результат.Вставить("Скидка", 0);
			
			Для Каждого Стр Из Рез.ЗначениеОтвета.orders Цикл
				нов = ТекСкидки.Добавить();
				нов.ДП = ДП;
				нов.ДД = ДД;
				нов.Приоритет = ДП.Приоритет;
				нов.Транзакция = Стр.transaction;
				Если Стр.error_code = 0 Тогда
					нов.Комментарий = Стр.message + ?(НЕ ПустаяСтрока(Результат.Комментарий), ". " + Результат.Комментарий, "");
				Иначе
					нов.Комментарий =
						Строка(Стр.error_code) + ". " + Стр.message
						+ ?(НЕ ПустаяСтрока(Результат.Комментарий), ". " + Результат.Комментарий, "");
				КонецЕсли;
				ИДПартии = СокрЛП(Стр.any_data);
				нов.Партия = Справочники.Партии.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДПартии));
				СтрокаЧека = тч.Найти(нов.Партия, "Партия");
				Если СтрокаЧека = Неопределено Тогда
					Результат.Скидки.Удалить(нов);
				Иначе
					нов.СуммаСкидки = СтрокаЧека.СуммаВсего - Стр.value;
					Результат.Скидка = Результат.Скидка + нов.СуммаСкидки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат.Вставить("Результат", Ложь);
			Результат.Вставить("Комментарий", "Ошибка №" + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message);
			#Если Клиент Тогда
			Предупреждение(
				"Скидка не рассчитана." + Символы.ПС + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message);
			#КонецЕсли
		КонецЕсли;
	Иначе
		// ошибка связи, анализ
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("Комментарий", "Ошибка связи №" + Рез.КодОтвета + ": " + Рез.Ошибка);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПодтвердитьПокупку(ДП, ДД, Чек, Скидки, ПараметрыЧека) Экспорт
	Параметры = ПараметрыСвязи(ДП, ДД);
	Запрос = Новый Структура;
	Запрос.Вставить("pos_id", Параметры.ИДКассы);
	Запрос.Вставить("card_number", Параметры.НомерКарты);
	Запрос.Вставить("phone_number", Параметры.Телефон);
	Запрос.Вставить("transactions", Новый Массив);
	
	Для Каждого Стр Из Скидки Цикл
		Если НЕ ПустаяСтрока(Стр.Транзакция) Тогда
			Запрос.transactions.Добавить(Стр.Транзакция);
		КонецЕсли;
	КонецЦикла;
	Если Запрос.transactions.Количество() = 0 Тогда
		Возврат Новый Структура("Результат,Комментарий", Ложь, "В чеке нет товаров с рассчитанной скидкой.");
	КонецЕсли;
	
	Рез = ОтправитьКоманду("/api/1.0/confirm_purchase/", ЗаписатьТекстJSON(Запрос), Параметры);
	
	Результат = Новый Структура;
	Если Рез.Результат Тогда
		Если Рез.ЗначениеОтвета.status = "success" Тогда
			Результат.Вставить("Результат", Истина);
			Результат.Вставить("Комментарий", Рез.ЗначениеОтвета.message);
		Иначе
			Результат.Вставить("Результат", Ложь);
			Результат.Вставить("Комментарий", "Ошибка №" + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message);
		КонецЕсли;
	Иначе
		// ошибка связи, анализ
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("Комментарий", "Ошибка связи №" + Рез.КодОтвета + ": " + Рез.Ошибка);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ОтменитьПокупку(ДП, ДД, Чек, Скидки, ПараметрыЧека) Экспорт
	ДопФункции = СтрокуВЧисло(ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_ДопФункции", ДП, "0")) = 1;
	Если ДопФункции Тогда
		Параметры = ПараметрыСвязи(ДП, ДД);
		Запрос = Новый Структура;
		Запрос.Вставить("pos_id", Параметры.ИДКассы);
		Запрос.Вставить("card_number", Параметры.НомерКарты);
		Запрос.Вставить("phone_number", Параметры.Телефон);
		Запрос.Вставить("trust_key", "");
		Запрос.Вставить("transactions", Новый Массив);
		
		Для Каждого Стр Из Скидки Цикл
			Если НЕ ПустаяСтрока(Стр.Транзакция) Тогда
				Запрос.transactions.Добавить(Стр.Транзакция);
			КонецЕсли;
		КонецЦикла;
		Если Запрос.transactions.Количество() = 0 Тогда
			Возврат Новый Структура("Результат,Комментарий", Ложь, "В чеке нет товаров с рассчитанной скидкой.");
		КонецЕсли;
		
		Рез = ОтправитьКоманду("/api/1.0/cancel_purchase/", ЗаписатьТекстJSON(Запрос), Параметры);
		
		Результат = Новый Структура;
		Если Рез.Результат Тогда
			Если Рез.ЗначениеОтвета.status = "success" Тогда
				Результат.Вставить("Результат", Истина);
				Результат.Вставить("Комментарий", Рез.ЗначениеОтвета.message);
			Иначе
				Результат.Вставить("Результат", Ложь);
				Результат.Вставить("Комментарий", "Ошибка №" + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message);
			КонецЕсли;
		Иначе
			// ошибка связи, анализ
			Результат.Вставить("Результат", Ложь);
			Результат.Вставить("Комментарий", "Ошибка связи №" + Рез.КодОтвета + ": " + Рез.Ошибка);
		КонецЕсли;
		Возврат Результат;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Результат", Истина);
		Результат.Вставить("Комментарий", "функция отмены покупки не поддерживается");
		Возврат Результат;
	КонецЕсли;
КонецФункции

Процедура ВыполнитьКоманду(Параметры = Неопределено, ЛогФайл = "") Экспорт
	
	ИмяСобытия = "Вместе.Онлайн. Старт регламентной выгрузки справочника аптек.";
	УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	Данные = "Начало выполнения: " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	Комментарий = "";
	РежимТранзакции = РежимТранзакцииЗаписиЖурналаРегистрации.Независимая;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурнала, , Данные, Комментарий, РежимТранзакции);
	
	// Выполним передачу справника по аптекам
	РезультатПСА = Новый Структура;
	ПередатьСведенияОбАптеках(РезультатПСА);
	Если НЕ РезультатПСА.Результат Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	ИмяСобытия = "Вместе.Онлайн. Завершение регламентной выгрузки справочника аптек.";
	Данные = "Задание выполнено: " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	Комментарий = РезультатПСА.Комментарий;
	РежимТранзакции = РежимТранзакцииЗаписиЖурналаРегистрации.Независимая;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурнала, , Данные, Комментарий, РежимТранзакции);
	
	Если НЕ РезультатПСА.Результат Тогда
		ВызватьИсключение ИмяСобытия + " " + РезультатПСА.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция МенюОбработки(Данные = Неопределено) Экспорт
	
	Если ТипЗнч(Данные) = Тип("Структура")
		И Данные.Свойство("ДП") Тогда
		ЭтотОбъект.ДП = Данные.ДП;
		Возврат Неопределено;
	КонецЕсли;
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("Ввод", "Ввод номера");
	Меню.Добавить("Регистрация", "Регистрация телефона");
	
	Выбор = Меню.ВыбратьЭлемент("Выберете действие");
	Если Выбор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрСравнить(Выбор.Значение, "Ввод") = 0 Тогда
		Возврат Авторизация();
	ИначеЕсли СтрСравнить(Выбор.Значение, "Регистрация") = 0 Тогда
		Возврат РегистрацияНомера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВернутьПараметрыСистемы() Экспорт
	
	ПараметрыСистемы = Новый Структура;
	ПараметрыСистемы.Вставить("ИдентификаторСистемы", "Вместе.Онлайн");
	ПараметрыСистемы.Вставить("МенюОбработки", Истина);
	
	Возврат ПараметрыСистемы;
	
КонецФункции

Процедура МесячныйОтчет(парДП) Экспорт
	
	ДП = парДП;
	Фрм = ПолучитьФорму("МесячныйОтчет");
	Фрм.Открыть();
	
КонецПроцедуры

Функция ВернутьСведенияДляЗаголовкаФормы(Заголовок = "") Экспорт
	
	СведенияДляЗаголовка = "";
	АктуальныеСведенияОПрограмме = ПолучитьАктуальныеСведенияОПрограмме();
	
	Попытка
		Наименование = СокрЛП(АктуальныеСведенияОПрограмме.Наименование);
		Версия = Строка(АктуальныеСведенияОПрограмме.Версия);
		ДатаВерсии = Строка(АктуальныеСведенияОПрограмме.ДатаВерсии);
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат СведенияДляЗаголовка;
	КонецПопытки;
	
	СведенияДляЗаголовка = СтрШаблон("%1. v.%2 [%3]", Наименование, Версия, ДатаВерсии);
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		СведенияДляЗаголовка = СтрШаблон("%1. %2", Заголовок, СведенияДляЗаголовка);
	КонецЕсли;
	
	Возврат СведенияДляЗаголовка;
	
КонецФункции

#Область РегистрацияТелефона

Функция ПроверкаСвязиТелефонНомерКарты(Параметры) Экспорт
	
	РезультатВыполнения = Новый Структура("Результат,Комментарий", Ложь, "");
	
	Запрос = Новый Структура;
	Запрос.Вставить("pos_id", Параметры.ИДКассы);
	Запрос.Вставить("card_number", Параметры.Карта);
	Запрос.Вставить("phone_number", Параметры.Телефон);
	Запрос.Вставить("trust_key", "");
	Рез = ОтправитьКоманду("/api/1.0/check_card_and_phone_number/", ЗаписатьТекстJSON(Запрос), Параметры);
	Если НЕ Рез.Результат Тогда
		РезультатВыполнения.Вставить("Результат", Ложь);
		РезультатВыполнения.Вставить("Комментарий", "Ошибка запроса данных");
		Возврат РезультатВыполнения;
	КонецЕсли;
	// ответ получен, надо проанализировать его
	Если Рез.ЗначениеОтвета.status = "success" Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Комментарий =
			"Проверка связки карты и номера телефона в базе.:" + Символы.ПС + Рез.ЗначениеОтвета.message;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Проверка связки карты и номера телефона в базе.:"
			+ Символы.ПС + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message;
	КонецЕсли;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПроверкаРегистрацииТелефона(Параметры) Экспорт
	
	РезультатВыполнения = Новый Структура("Результат,Комментарий", Ложь, "");
	
	// какие карты привязаны к телефону
	Запрос = Новый Структура;
	Запрос.Вставить("pos_id", Параметры.ИДКассы);
	Запрос.Вставить("phone_number", СокрЛП(Параметры.Телефон));
	Запрос.Вставить("trust_key", "");
	Рез = ОтправитьКоманду("/api/1.0/check_phone_number/", ЗаписатьТекстJSON(Запрос), Параметры);
	Если НЕ Рез.Результат Тогда
		РезультатВыполнения.Вставить("Результат", Ложь);
		РезультатВыполнения.Вставить("Комментарий", "Ошибка запроса данных");
		Возврат РезультатВыполнения;
	КонецЕсли;
	// ответ получен, надо проанализировать его
	Если Рез.ЗначениеОтвета.status = "success" Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Комментарий =
			"Проверка существования номера телефона в базе: "
			+ Символы.ПС + Рез.ЗначениеОтвета.message + Символы.ПС + Рез.ЗначениеОтвета.cards;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Проверка существования номера телефона в базе: "
			+ Символы.ПС + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message;
	КонецЕсли;
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ЗапросПроверочногоКода(Параметры) Экспорт
	
	РезультатВыполнения = Новый Структура("Результат,Комментарий", Ложь, "");
	
	Запрос = Новый Структура;
	Запрос.Вставить("pos_id", Параметры.ИДКассы);
	Запрос.Вставить("card_number", Параметры.НомерКарты);
	Запрос.Вставить("phone_number", Параметры.Телефон);
	Запрос.Вставить("trust_key", "");
	Рез = ОтправитьКоманду("/api/1.0/register/", ЗаписатьТекстJSON(Запрос), Параметры);
	Если НЕ Рез.Результат Тогда
		// ошибка связи, анализ
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий = "Ошибка связи №" + Рез.КодОтвета + ": " + Рез.Ошибка;
		Возврат РезультатВыполнения;
	КонецЕсли;
	// ответ получен, надо проанализировать его
	Если НЕ Рез.ЗначениеОтвета.status = "success" Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Ошибка выполения команды отправки кода подтверждения на указанный номер телефона: "
			+ Параметры.Телефон + Символы.ПС + Рез.ЗначениеОтвета.message;
		Возврат РезультатВыполнения;
	КонецЕсли;
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий =
		"Код подтверждения отправлен на указанный номер телефона: "
		+ Параметры.Телефон + Символы.ПС + Рез.ЗначениеОтвета.message;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПодтверждениеРегистрацииТелефона(Параметры) Экспорт
	
	РезультатВыполнения = Новый Структура("Результат,Комментарий", Ложь, "");
	
	Запрос = Новый Структура;
	Запрос.Вставить("pos_id", Параметры.ИДКассы);
	Запрос.Вставить("code", СокрЛП(Параметры.КодПодтверждения));
	Рез = ОтправитьКоманду("/api/1.0/confirm_code/", ЗаписатьТекстJSON(Запрос), Параметры);
	Если НЕ Рез.Результат Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Ошибка привязки карты к телефону. №" + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message;
	КонецЕсли;
	Если Рез.ЗначениеОтвета.status = "success" Тогда
		РезультатВыполнения.Результат = Истина;
		РезультатВыполнения.Комментарий = Рез.ЗначениеОтвета.message;
	Иначе
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Ошибка подтверждения №" + Рез.ЗначениеОтвета.error_code + ": " + Рез.ЗначениеОтвета.message;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Процедура ПередатьСведенияОбАптеках(РезультатВыполнения = Неопределено, Параметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Выгрузка справочника торговых точек(аптек). Ошибка выполнения");
	РезультатВыполнения.Вставить("ОтветСервера", Неопределено);
	РезультатВыполнения.Вставить("СодержимоеВыгрузки", Неопределено);
	
	СправочникАптеки = Новый Структура;
	СправочникАптеки.Вставить("PHARMACIES", Новый Структура("CODE", "ЛотРЗ"));
	
	// /////////////////////////// Получим данные по аптекам
	Запрос = Новый Запрос;
	Запрос.Текст = ЭтотОбъект.ПолучитьМакет("ТекстЗапросаДанныеАптек").ПолучитьТекст();
	ЗапросРезультат = Запрос.Выполнить();
	Если ЗапросРезультат.Пустой() Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Выгрузка справочника торговых точек(аптек). Ошибка выполнения. Данные для выгрузки отсутствуют";
		Возврат;
	КонецЕсли;
	
	// Заведет соответствия территориальным обозначениям.
	// Процессинг строго проверяет наименования территориальных обозначений,
	// не принимая данные если идет расхождение с КЛАДР
	СоответствиеРегионов = Новый Соответствие;
	СоответствиеРегионов.Вставить("калининград", "Калининградская область");
	СоответствиеРегионов.Вставить("великий новгород", "Новгородская область");
	СоответствиеРегионов.Вставить("белгород", "Белгородская область");
	СоответствиеГород = Новый Соответствие;
	СоответствиеГород.Вставить("спб", "Санкт-Петербург");
	СоответствиеГород.Вставить("мурманская область", "Мурманск");
	СоответствиеГород.Вставить("выборгский район", "Выборг");
	СоответствиеГород.Вставить("бокситогорский район", "Пикалево");
	СоответствиеГород.Вставить("волосовский район", "Волосово");
	СоответствиеГород.Вставить("волховский район", "Сясьстрой");
	СоответствиеГород.Вставить("всеволожский район", "Всеволожск");
	СоответствиеГород.Вставить("гатчинский район", "Гатчина");
	СоответствиеГород.Вставить("кингисеппский район", "Кингисепп");
	СоответствиеГород.Вставить("киришский район", "Кириши");
	СоответствиеГород.Вставить("лужский район", "Луга");
	СоответствиеГород.Вставить("подпорожский район", "Подпорожье");
	СоответствиеГород.Вставить("приозерский район", "Приозерск");
	СоответствиеГород.Вставить("сланцевский район", "Сланцы");
	СоответствиеГород.Вставить("тихвинский район", "Тихвин");
	СоответствиеГород.Вставить("тосненский район", "Тосно");
	СоответствиеГород.Вставить("лодейнопольский район", "Лодейное поле");
	СоответствиеГород.Вставить("ломоносовский район", "Ломоносов");
	
	// /////////////////////////// Запишем полученные данные по аптекам в коллекцию
	ВыборкаПоАптекам = ЗапросРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	АптекиДанные = Новый Структура("PHARMACIES", Новый Структура);
	АптекиДанные.PHARMACIES.Вставить("CHAINCODE", "984");
	АптекиДанные.PHARMACIES.Вставить("COUNT", ВыборкаПоАптекам.Количество());
	АптекиДанные.PHARMACIES.Вставить("PHARMACY", Новый Массив);
	Пока ВыборкаПоАптекам.Следующий() Цикл
		ДанныеАптеки = Новый Структура("PHARMACY", Новый Структура);
		ДанныеАптеки.PHARMACY.Вставить("CODE");
		ДанныеАптеки.PHARMACY.Вставить("INN");
		ДанныеАптеки.PHARMACY.Вставить("LEGALENTITY");
		ДанныеАптеки.PHARMACY.Вставить("NUM");
		ДанныеАптеки.PHARMACY.Вставить("NAME");
		ДанныеАптеки.PHARMACY.Вставить("CITY");
		ДанныеАптеки.PHARMACY.Вставить("REGION");
		ДанныеАптеки.PHARMACY.Вставить("ADDRESS");
		ДанныеАптеки.PHARMACY.Вставить("BRAND");
		ДанныеАптеки.PHARMACY.Вставить("CONTACTPERSON");
		ДанныеАптеки.PHARMACY.Вставить("PHONES");
		ДанныеАптеки.PHARMACY.Вставить("WORKTIME");
		ДанныеАптеки.PHARMACY.Вставить("IS_ACTUAL");
		ДанныеАптеки.PHARMACY.Вставить("WORK_MODE");
		ДанныеАптеки.PHARMACY.Вставить("DESCRIPTION");
		ДанныеАптеки.PHARMACY.Вставить("MODE");
		ДанныеАптеки.PHARMACY.Вставить("POSES", Новый Структура);
		ВыборкаРабочиеМестаАптеки = ВыборкаПоАптекам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРабочиеМестаАптеки.Следующий() Цикл
			ДанныеАптеки.PHARMACY.CODE =
				?(НЕ СтрНайти(Врег(ВыборкаРабочиеМестаАптеки.БрендНаименование), "АДБ") = 0, "АДБ", "ЛОТРЗ")
				+ "_" + Врег(ВыборкаРабочиеМестаАптеки.АптекаКод);
			ДанныеАптеки.PHARMACY.INN = ВыборкаРабочиеМестаАптеки.ФирмаИНН;
			ДанныеАптеки.PHARMACY.LEGALENTITY = ВыборкаРабочиеМестаАптеки.ФирмаНаименование;
			ДанныеАптеки.PHARMACY.NUM =
				?(НЕ СтрНайти(Врег(ВыборкаРабочиеМестаАптеки.БрендНаименование), "АДБ") = 0,
					Строка(Число(ВыборкаРабочиеМестаАптеки.НомерАптеки) - 700), ВыборкаРабочиеМестаАптеки.НомерАптеки);
			ДанныеАптеки.PHARMACY.NAME = ВыборкаРабочиеМестаАптеки.АптекаНаименование;
			ДанныеАптеки.PHARMACY.CITY =
				ПолучитьТерриториальноеСоответсвие(СоответствиеГород, ВыборкаРабочиеМестаАптеки.ЧастиРегионовНаименование);
			ДанныеАптеки.PHARMACY.REGION =
				ПолучитьТерриториальноеСоответсвие(СоответствиеРегионов, ВыборкаРабочиеМестаАптеки.РегионНаименование);
			ДанныеАптеки.PHARMACY.ADDRESS = ВыборкаРабочиеМестаАптеки.АптекаАдрес;
			ДанныеАптеки.PHARMACY.BRAND = ВыборкаРабочиеМестаАптеки.БрендНаименование;
			ДанныеАптеки.PHARMACY.CONTACTPERSON = ВыборкаРабочиеМестаАптеки.АптекаЗаведующая;
			ДанныеАптеки.PHARMACY.PHONES = ВыборкаРабочиеМестаАптеки.АптекаТелефон;
			ДанныеАптеки.PHARMACY.WORKTIME = ВыборкаРабочиеМестаАптеки.АптекаВремяРаботы;
			ДанныеАптеки.PHARMACY.IS_ACTUAL = "Y";
			ДанныеАптеки.PHARMACY.WORK_MODE = "give_take";
			ДанныеАптеки.PHARMACY.DESCRIPTION = Строка(ВыборкаРабочиеМестаАптеки.АптекаСсылка.УникальныйИдентификатор());
			ДанныеАптеки.PHARMACY.MODE = "online";
			ДанныеАптеки.PHARMACY.POSES.Вставить(
				"POS_" + СтрЗаменить(ВыборкаРабочиеМестаАптеки.РабочееМестоСсылка.УникальныйИдентификатор(), "-", ""),
				НовыйМассив(Новый Структура("POS", Новый Структура("CODE",
							Строка(ВыборкаРабочиеМестаАптеки.РабочееМестоСсылка.УникальныйИдентификатор())))));
		КонецЦикла;
		АптекиДанные.PHARMACIES.PHARMACY.Добавить(ДанныеАптеки);
	КонецЦикла;
	
	// /////////////////////////// Преобразуем структуру данных аптек в XML текст
	РезультатXMLПИК = Новый Структура;
	ПараметрыXMLПИК = Новый Структура("КоллекцияПреобразования", АптекиДанные);
	XMLПреобразоватьИзКоллекции(РезультатXMLПИК, ПараметрыXMLПИК);
	Если НЕ РезультатXMLПИК.Результат Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Выгрузка справочника торговых точек(аптек). Ошибка. " + РезультатXMLПИК.Комментарий;
		Возврат;
	КонецЕсли;
	
	// /////////////////////////// Выгрузим XML справочник данных аптек на файлообменник SFTP
	ИмяФайлаСправочника =
		КаталогВременныхФайлов() + "AZ_PL_984_"
		+ СтрЗаменить(Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd"), "-", "") + ".xml";
	
	Попытка
		ДанныеАптекXML = Новый ЗаписьXML;
		ДанныеАптекXML.ОткрытьФайл(ИмяФайлаСправочника, "UTF-8", Ложь);
		ДанныеАптекXML.ЗаписатьБезОбработки(РезультатXMLПИК.XMLТекст);
		ДанныеАптекXML.Закрыть();
	Исключение
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий = "Выгрузка справочника торговых точек(аптек). Ошибка. " + Строка(ОписаниеОшибки());
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	КоллекцияФайлов = Новый Массив;
	КоллекцияФайлов.Добавить(Новый Файл(ИмяФайлаСправочника));
	
	Сервер = ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_FTP_Сервер");
	Порт = ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_FTP_Порт");
	Пользователь = ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_FTP_Пользователь");
	Пароль = ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_FTP_Пароль");
	КлючСервера = ФКНастройки.ПолучитьЗначениеНастройки("Вместе_Онлайн_FTP_SSHКлючСервера");
	КаталогВыгрузки = ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_FTP_КаталогВыгрузки");
	КоллекцияФайловВыгрузки = КоллекцияФайлов;
	
	РезультатWinSCP = Новый Структура;
	ПараметрыWinSCP = Новый Структура(
			"Сервер,Порт,Пользователь,Пароль,КлючСервера,КаталогВыгрузки,КоллекцияФайловВыгрузки",
			Сервер, Порт, Пользователь, Пароль, КлючСервера, КаталогВыгрузки, КоллекцияФайловВыгрузки);
	ВыгрузкаWinSCP(РезультатWinSCP, ПараметрыWinSCP);
	Если НЕ РезультатWinSCP.Результат Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Выгрузка справочника торговых точек(аптек). Ошибка. " + РезультатWinSCP.Комментарий;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = "Выгрузка справочника торговых точек(аптек). Операция выполнена";
	РезультатВыполнения.СодержимоеВыгрузки = РезультатXMLПИК.XMLТекст;
	
КонецПроцедуры

Процедура XMLПреобразоватьИзКоллекции(РезультатВыполнения = Неопределено, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Сериализация в XML из коллекции данных. Ошибка выполнения");
	РезультатВыполнения.Вставить("XMLТекст", Неопределено);
	
	КоллекцияПреобразования = Параметры.КоллекцияПреобразования;
	ТипКодировки = ?(Параметры.Свойство("ТипКодировки"), Параметры.ТипКодировки, "UTF-8");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ТипКодировки);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	РезультатРК = Новый Структура;
	ПараметрыРК = Новый Структура("КоллекцияРазбора,ЗаписьXML", КоллекцияПреобразования, ЗаписьXML);
	XMLРазборКоллекции(РезультатРК, ПараметрыРК);
	Если НЕ РезультатРК.Результат Тогда
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий = "Сериализация в XML из коллекции данных. Ошибка. " + РезультатРК.Комментарий;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = "Сериализация в XML из коллекции данных. Операция выполнена";
	РезультатВыполнения.XMLТекст = ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура XMLРазборКоллекции(РезультатВыполнения = Неопределено, Параметры) Экспорт
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Разбор коллекции. Ошибка выполнения");
	
	КоллекцияРазбора = Параметры.КоллекцияРазбора;
	ЗаписьXML = Параметры.ЗаписьXML;
	
	Попытка
		Для Каждого ЭлементКоллекции Из КоллекцияРазбора Цикл
			Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Структура") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементКоллекции.Ключ);
				РезультатРК = Новый Структура;
				ПараметрыРК = Новый Структура("КоллекцияРазбора,ЗаписьXML", ЭлементКоллекции.Значение, ЗаписьXML);
				XMLРазборКоллекции(РезультатРК, ПараметрыРК);
				Если НЕ РезультатРК.Результат Тогда
					РезультатВыполнения.Результат = Ложь;
					РезультатВыполнения.Комментарий = "Разбор коллекции. Ошибка. " + РезультатРК.Комментарий;
					Возврат;
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ТипЗнч(ЭлементКоллекции.Значение) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассив Из ЭлементКоллекции.Значение Цикл
					РезультатРК = Новый Структура;
					ПараметрыРК = Новый Структура("КоллекцияРазбора,ЗаписьXML", ЭлементМассив, ЗаписьXML);
					XMLРазборКоллекции(РезультатРК, ПараметрыРК);
					Если НЕ РезультатРК.Результат Тогда
						РезультатВыполнения.Результат = Ложь;
						РезультатВыполнения.Комментарий = "Разбор коллекции. Ошибка. " + РезультатРК.Комментарий;
						Возврат;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементКоллекции.Ключ);
				ЗаписьXML.ЗаписатьТекст(Строка(ЭлементКоллекции.Значение));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
	Исключение
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий = "Разбор коллекции. Ошибка. " + Строка(ОписаниеОшибки());
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = "Разбор Коллекции. Операция выполнена";
	
КонецПроцедуры

#КонецОбласти

#Область Логирование

Процедура ВыполнитьЗаписьЛога(ИмяФайла, Данные, ВставлятьМетку = Истина, НовыеСверху = Ложь) Экспорт
	//КЮБ (авоматическое создание каталога и файла лога если отсутствует);
	ИмяФайла = НормализоватьКаталог(ИмяФайла, Истина);
	ОбъектФайл = Новый Файл(ИмяФайла);
	Если НЕ ОбъектФайл.Существует() Тогда
		МассивПуть = СтрРазделить(ИмяФайла, "/", Ложь);
		ГотовыйПуть = СокрЛП(МассивПуть[0]);
		МассивПуть.Удалить(0);
		МассивПуть.Удалить(МассивПуть.Количество() - 1);
		Для Каждого КусокПути Из МассивПуть Цикл;
			ГотовыйПуть = ГотовыйПуть + "/" + КусокПути;
			ОбъектФайл = Новый Файл(ГотовыйПуть);
			Если НЕ ОбъектФайл.Существует() Тогда
				СоздатьКаталог(ГотовыйПуть);
			КонецЕсли;
		КонецЦикла;;
	КонецЕсли;
	// КЮБ
	ЗаписьЛога(ИмяФайла, Данные, ВставлятьМетку, НовыеСверху);
КонецПроцедуры

Процедура ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке, УровеньЖурнала = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(УровеньЖурнала) = Тип("УровеньЖурналаРегистрации") Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ИмяСобытия = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ИмяСобытия) Тогда
			ИмяСобытия = "Непредвиденная ошибка.";
		КонецЕсли;
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ИмяСобытия = "Не типичное поведение программы.";
		ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
		Комментарий = ОписаниеТипаСтрока.ПривестиЗначение(ИнформацияОбОшибке);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия, УровеньЖурнала, , ЭтотОбъект.Метаданные().ПолноеИмя(), Комментарий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Авторизация()
	
	РезультатВводаАвторизации = ЭтотОбъект.ПолучитьФорму("ФормаВводаНомер").ОткрытьМодально();
	
	Если РезультатВводаАвторизации = Неопределено Тогда
		Возврат РезультатВводаАвторизации;
	КонецЕсли;
	
	ЗапросТекст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыДисконта.Ссылка КАК ДокументыДисконта
		|ИЗ
		|	Справочник.ДокументыДисконта КАК ДокументыДисконта
		|ГДЕ ИСТИНА
		|	И ДокументыДисконта.Наименование = &Наименование
		|	И ДокументыДисконта.ДП = &ДП
		|	И ДокументыДисконта.Заблокирован = ЛОЖЬ
		|	И ДокументыДисконта.ПометкаУдаления = ЛОЖЬ
		|";
	Запрос = Новый Запрос;
	Запрос.Текст = ЗапросТекст;
	Запрос.Параметры.Вставить("ДП", ЭтотОбъект.ДП);
	Запрос.Параметры.Вставить("Наименование", РезультатВводаАвторизации.Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументДисконтаСсылка = Справочники.ДокументыДисконта.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		ДокументДисконтаСсылка = Выборка.ДокументыДисконта;
		Прервать;
	КонецЦикла;
	
	Если ДокументДисконтаСсылка.Пустая() Тогда
		Попытка
			ДокументДисконта = Справочники.ДокументыДисконта.СоздатьЭлемент();
			ДокументДисконта.Наименование = РезультатВводаАвторизации.Номер;
			ДокументДисконта.ДП = ЭтотОбъект.ДП.Ссылка;
			ДокументДисконта.Записать();
			ДокументДисконтаСсылка = ДокументДисконта.Ссылка;
		Исключение
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	Если ДокументДисконтаСсылка.Пустая() Тогда
		Возврат РезультатВводаАвторизации;
	КонецЕсли;
	РезультатВводаАвторизации.Вставить("ДокументДисконта", ДокументДисконтаСсылка);
	Возврат РезультатВводаАвторизации;
	
КонецФункции

Функция РегистрацияНомера()
	
	РегистрацияНомераТелефона = ЭтотОбъект.ПолучитьФорму("РегистрацияНомераТелефона").ОткрытьМодально();
	
	Возврат РегистрацияНомераТелефона;
	
КонецФункции

Функция ПараметрыСвязи(ДП, ДД)
	Рез = Новый Структура;
	Рез.Вставить("Логин", СокрЛП(ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_Логин", ДП, "")));
	Рез.Вставить("Пароль", СокрЛП(ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_Пароль", ДП, "")));
	Рез.Вставить("Хост", СокрЛП(ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_Хост", ДП, "")));
	Рез.Вставить("HTTPS", СокрЛП(ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_HTTPS", ДП, "")));
	Рез.Вставить("ДП", ДП);
	Рез.Вставить("ДД", ДД);
	РабочееМестоКлиента = ПараметрыСеанса.РабочееМестоКлиента;
	Если НЕ ЗначениеЗаполнено(РабочееМестоКлиента) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не определено текущее рабочее место.");
		ИДРабМеста = "";
	Иначе
		
		ИДРабМеста = Строка(РабочееМестоКлиента.УникальныйИдентификатор());
		Если НЕ ЗначениеЗаполнено(ИДРабМеста) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				"Не задан идентификатор кассового терминала (от АстраЗенеки) для текущего рабочего места.");
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(СокрЛП(ДД.Наименование), 2) = "+7" Тогда
		НомерКарты = "";
		НомерТелефона = СокрЛП(ДД.Наименование);
	Иначе
		НомерКарты = СокрЛП(ДД.Наименование);
		НомерТелефона =
			СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СокрЛП(ДД.Больной.Телефон), "-", ""), "(", ""), ")", ""), " ", "");
	КонецЕсли;
	
	Рез.Вставить("ИДКассы", ИДРабМеста);
	Рез.Вставить("НомерКарты", НомерКарты);
	Рез.Вставить("Телефон", НомерТелефона);
	Возврат Рез;
КонецФункции

Функция ЗаписатьТекстJSON(Пар)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Пар);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ПрочитатьТекстJSON(ТекстJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON);
КонецФункции

// возвращает Структура("Результат,КодОтвета,ТекстОтвета,ЗначениеОтвета", Истина, 200) если успешно
//            Структура("Результат,КодОтвета,Ошибка", Ложь) если ошибка
Функция ОтправитьКоманду(Команда, ТекстJSON, Параметры)
	ЛогФайл = ФКНастройки.ПолучитьЗначениеНастройки("ВместеОнлайн_Лог", Параметры.ДП, "");
	Попытка
		Пока Истина Цикл
			// https://docs.microsoft.com/en-us/windows/desktop/winhttp/winhttprequest
			WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			WinHttp.Open("POST", Параметры.HTTPS + "://" + Параметры.Хост + Команда, 0);
			WinHttp.SetRequestHeader("authorization-token", Параметры.Логин);
			WinHttp.SetRequestHeader("authorization-secret", Параметры.Пароль);
			WinHttp.Send(КодироватьСтроку(ТекстJSON, СпособКодированияСтроки.КодировкаURL));
			ВыполнитьЗаписьЛога(ЛогФайл, ТекстJSON);
			Если WinHttp.Status = 200 Тогда
				Ответ = WinHttp.ResponseText;
				ВыполнитьЗаписьЛога(ЛогФайл, Ответ);
				Рез = Новый Структура("Результат,КодОтвета,ТекстОтвета,ЗначениеОтвета",
						Истина, WinHttp.Status, Ответ, ПрочитатьТекстJSON(Ответ));
				Если Рез.ЗначениеОтвета.status = "error"
					И Рез.ЗначениеОтвета.error_code = 500 Тогда
					#Если Клиент Тогда
					Если Вопрос(
							"Сервис недоступен. Попробуйте ещё раз или свяжитесь с техническими специалистами.",
							НовыйСписокЗначений("Повторить попытку;Отмена"), ,
							"Повторить попытку", "Ошибка связи с сервисом.") = "Повторить попытку" Тогда
						Продолжить;
					КонецЕсли;
					#Иначе
					#КонецЕсли
				КонецЕсли;
			Иначе
				Рез = Новый Структура("Результат,КодОтвета,Ошибка", Ложь, WinHttp.Status, WinHttp.StatusText);
				ВыполнитьЗаписьЛога(ЛогФайл, "Ошибка " + Рез.КодОтвета + ": " + Рез.Ошибка);
				// кода ошибок смотри здесь https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
			КонецЕсли;
			WinHttp = Неопределено;
			Возврат Рез;
		КонецЦикла;
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Ошибка = "Ошибка соединения: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(Ошибка);
		Возврат Новый Структура("Результат,КодОтвета,Ошибка", Ложь, 0, Ошибка);
	КонецПопытки;
	
	// попытка сделать языком 1С, но ничего не получается
	Попытка
		Соединение = Новый HTTPСоединение(
				Параметры.Хост + Команда, , Параметры.Логин, Параметры.Пароль, , 7,
				?(Параметры.HTTPS, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено));
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Ошибка = "Ошибка соединения: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(Ошибка);
		Возврат Новый Структура("Результат,КодОтвета,Ошибка", Ложь, 0, Ошибка);
	КонецПопытки;
	Попытка
		Пока Истина Цикл
			Запрос = Новый HTTPЗапрос();
			
			Запрос.УстановитьТелоИзСтроки(КодироватьСтроку(ТекстJSON, СпособКодированияСтроки.КодировкаURL));
			HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
			Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			Соединение = Неопределено;
			Если HTTPОтвет.КодСостояния = 200 Тогда // все Ок
				Рез = Новый Структура("Результат,КодОтвета,ТекстОтвета,ЗначениеОтвета",
						Истина, HTTPОтвет.КодСостояния, Ответ, ПрочитатьТекстJSON(Ответ));
				Если Рез.ЗначениеОтвета.status = "error"
					И Рез.ЗначениеОтвета.error_code = 500 Тогда
					#Если Клиент Тогда
					Если Вопрос(
							"Сервис недоступен. Попробуйте ещё раз или свяжитесь с техническими специалистами.",
							НовыйСписокЗначений("Повторить попытку;Отмена"), ,
							"Повторить попытку", "Ошибка связи с сервисом.") = "Повторить попытку" Тогда
						Продолжить;
					КонецЕсли;
					#Иначе
					#КонецЕсли
				КонецЕсли;
				Возврат Рез;
			Иначе
				// кода ошибок смотри здесь https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
				Возврат Новый Структура("Результат,КодОтвета,Ошибка", Ложь, HTTPОтвет.КодСостояния, Ответ);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Ошибка = "Ошибка отправки команды <" + Команда + ">: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(Ошибка);
		Соединение = Неопределено;
		Возврат Новый Структура("Результат,КодОтвета,Ошибка", Ложь, 0, Ошибка);
	КонецПопытки;
КонецФункции

Функция ПолучитьТерриториальноеСоответсвие(ТерриториальныеСоответствия, Знач ИскомаяЛокация)
	
	ТерриториальноеСоответствие = ТерриториальныеСоответствия.Получить(Нрег(ИскомаяЛокация));
	Если НЕ ТерриториальноеСоответствие = Неопределено Тогда
		Возврат ТерриториальноеСоответствие;
	КонецЕсли;
	Возврат ИскомаяЛокация;
	
КонецФункции

Процедура ВыгрузкаWinSCP(РезультатВыполнения = Неопределено, Параметры = Неопределено)
	
	//////////////////////////////////////////////////////////////
	// Регистрация обьекта WinSCP производится следующей командой:
	// C:\Windows\Microsoft.NET\Framework64\v4.0.30319\RegAsm.exe
	//		"C:\Program Files (x86)\WinSCP\WinSCPnet.dll" /codebase /tlb:"C:\Program Files (x86)\WinSCP\WinSCPnet64.tlb"
	//////////////////////////////////////////////////////////////
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("Комментарий", "Выгрузка средствами WinSCP. Ошибка выполнения");
	
	Сервер = Параметры.Сервер;
	Порт = Параметры.Порт;
	Пользователь = Параметры.Пользователь;
	Пароль = Параметры.Пароль;
	КлючСервера = Параметры.КлючСервера;
	КаталогВыгрузки = Параметры.КаталогВыгрузки;
	КоллекцияФайловВыгрузки = Параметры.КоллекцияФайловВыгрузки;
	
	ПараметрыСеансаПодключения = Неопределено;
	Попытка
		ПараметрыСеансаПодключения = Новый COMОбъект("WinSCP.SessionOptions");
	Исключение
		СеансПодключения = Неопределено;
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий =
			"Выгрузка средствами WinSCP. Ошибка создания параметров подключения. " + Строка(ОписаниеОшибки());
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	ПараметрыСеансаПодключения.HostName = Строка(Сервер);
	ПараметрыСеансаПодключения.UserName = Строка(Пользователь);
	ПараметрыСеансаПодключения.Password = Строка(Пароль);
	ПараметрыСеансаПодключения.PortNumber = Строка(Порт);
	ПараметрыСеансаПодключения.SshHostKeyFingerprint = Строка(КлючСервера);
	
	СеансПодключения = Неопределено;
	Попытка
		СеансПодключения = Новый COMОбъект("WinSCP.Session");
		СеансПодключения.Open(ПараметрыСеансаПодключения);
	Исключение
		СеансПодключения = Неопределено;
		ПараметрыСеансаПодключения = Неопределено;
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.Комментарий = "Выгрузка средствами WinSCP. Ошибка создания сессии. " + Строка(ОписаниеОшибки());
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	Для Каждого ФайлВыгрузки Из КоллекцияФайловВыгрузки Цикл
		Попытка
			СеансПодключения.PutFileToDirectory(ФайлВыгрузки.ПолноеИмя, КаталогВыгрузки);
		Исключение
			СеансПодключения.Dispose();
			СеансПодключения = Неопределено;
			ПараметрыСеансаПодключения = Неопределено;
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.Комментарий = "Выгрузка средствами WinSCP. Ошибка передачи данных. " + Строка(ОписаниеОшибки());
			ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		СеансПодключения.Dispose();
	Исключение
		ВыполнитьЗаписьЖурналаРегистрацииПриОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	СеансПодключения = Неопределено;
	ПараметрыСеансаПодключения = Неопределено;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.Комментарий = "Выгрузка средствами WinSCP. Операция выполнена";
	
КонецПроцедуры

// Костыль для подмены ШК участников проекта
// При условии, что товар участвует в проекте но ШК который мы передаем не известен процессингу
// - подменяем такой ШК на валидный для системы лояльности
Функция ПолучитьВалидныйШК(ИсходныйШК)
	
	СоответствиеШК = Новый Соответствие;
	
	// ЗШК ПУЛЬС ЗДОРОВЬЯ (Санофи)
	// КОПЛАВИКС (клопидогрел+ацетилсалициловая кислота) таблетки покрытые пленочной оболочкой 100 мг+75 мг № 100
	СоответствиеШК.Вставить("3664798039115", НовыйМассив("3582910066484", ",", Ложь));
	// ПЛАВИКС (клопидогрел) таблетки покрытые пленочной оболочкой 75 мг № 100
	СоответствиеШК.Вставить("3664798039153", НовыйМассив("3582910073482", ",", Ложь));
	// Розукард таблетки покрытые пленочной оболочкой 10 мг (блистеры) №30
	СоответствиеШК.Вставить("8594739205390", НовыйМассив("8594739224735", ",", Ложь));
	// Розукард таблетки покрытые пленочной оболочкой 10 мг (блистеры) №90
	СоответствиеШК.Вставить("8594739205512", НовыйМассив("8594739224759", ",", Ложь));
	// Розукард таблетки покрытые пленочной оболочкой 20 мг (блистеры) №30
	СоответствиеШК.Вставить("8594739205413", НовыйМассив("8594739224766", ",", Ложь));
	// Розукард таблетки покрытые пленочной оболочкой 20 мг (блистеры) №90
	СоответствиеШК.Вставить("8594739205536", НовыйМассив("8594739224780", ",", Ложь));
	// Телзап - таблетки 40 мг №90
	СоответствиеШК.Вставить("3582910091141", НовыйМассив("3664798038781", ",", Ложь));
	// Телзап - таблетки 80 мг №90
	СоответствиеШК.Вставить("3582910091165", НовыйМассив("3664798038828", ",", Ложь));
	
	КоллекцияВалидныйШК = СоответствиеШК.Получить(ИсходныйШК);
	ВалидныйШК = ?(КоллекцияВалидныйШК = Неопределено, ИсходныйШК, КоллекцияВалидныйШК[0]);
	Возврат ВалидныйШК;
	
КонецФункции

#Область СведенияОПрограмме

Функция ПолучитьАктуальныеСведенияОПрограмме()
	
	АктуальныеСведенияОПрограмме =
		Новый Структура("Наименование, ДатаСоздания, Автор, Описание, Версия, ДатаВерсии, АвторВерсии, ОписаниеВерсии");
	
	СведенияОПрограмме = СведенияОПрограмме();
	
	ЗаполнитьЗначенияСвойств(АктуальныеСведенияОПрограмме, СведенияОПрограмме,
		"Наименование, ДатаСоздания, Автор, Описание");
	ЗаполнитьЗначенияСвойств(АктуальныеСведенияОПрограмме,
		СведенияОПрограмме.ОписаниеВерсий[СведенияОПрограмме.ОписаниеВерсий.ВГраница()],
		"Версия, ДатаВерсии, АвторВерсии, ОписаниеВерсии");
	
	Возврат АктуальныеСведенияОПрограмме;
	
КонецФункции

Функция СведенияОПрограмме()
	
	ОписаниеОбработки = Новый Структура;
	ОписаниеОбработки.Вставить("Наименование", "Клиент взаимодействия 'Vmeste.Online'");
	ОписаниеОбработки.Вставить("ДатаСоздания", Формат('2020-01-01', "ДФ=dd.MM.yyyy"));
	ОписаниеОбработки.Вставить("Автор", "КЮБ");
	ОписаниеОбработки.Вставить("Описание",
		"Программа реализующая механику интеграционного взаимодействия с ситемой лольности на платфоме 'Vmeste.Online'");
	ОписаниеОбработки.Вставить("ОписаниеВерсий", Новый Массив);
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"1.0", '2021-01-01', "КЮБ", "Доработки программы для запуска в сетях ЛОТРЗ и АДБ"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"1.1", '2021-10-18', "КЮБ",
			"Добавление формы ввода данных. Доработка механик предоставления дисконта по номеру телефона"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.0", '2021-11-25', "КЮБ",
			"Реализация и доработка методов регистрации(привязки) номера телефона.
			|Доработка программы для большей уиверсальности при работе с разными системами лояльности"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.1", '2022-01-11', "КЮБ",
			"Реализован костыль позволяющий подменять для товаров участников ШК с тех которые процессинг не знает на валидные"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.2", '2022-02-11', "КЮБ", "В костыль для подмены ЗШК добавлены новые коды"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.3", '2022-02-17', "КЮБ", "Программа доработана для выгрузки справочника Аптек и Касс на платформу лояльности"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.4", '2022-10-12', "КЮБ", "Доработки и исправления от 12.10.2022"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.5", '2023-03-02', "КЮБ", "Доработки и исправления от 02.03.2023"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.6", '2023-04-04', "КЮБ", "Доработки и исправления от 04.04.2023"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.7", '2023-08-02', "КЮБ", "Доработки от 02.08.2023"));
	
	ОписаниеОбработки.ОписаниеВерсий.Добавить(КонструкторОписаниеВерсийПрограммы(
			"2.8", '2023-09-08', "КЮБ", "Общие доработки от 08.09.2023"));
	
	Возврат ОписаниеОбработки;
	
КонецФункции

Функция КонструкторОписаниеВерсийПрограммы(
		Версия = "0.0", ДатаВерсии = '0001-01-01', АвторВерсии = "", ОписаниеВерсии = "")
	
	ОписаниеВерсийПрограммы = Новый Структура;
	ОписаниеВерсийПрограммы.Вставить("Версия", Версия);
	ОписаниеВерсийПрограммы.Вставить("ДатаВерсии", Формат(ДатаВерсии, "ДФ=dd.MM.yyyy"));
	ОписаниеВерсийПрограммы.Вставить("АвторВерсии", АвторВерсии);
	ОписаниеВерсийПрограммы.Вставить("ОписаниеВерсии", ОписаниеВерсии);
	
	Возврат ОписаниеВерсийПрограммы;
	
КонецФункции

#КонецОбласти

#КонецОбласти